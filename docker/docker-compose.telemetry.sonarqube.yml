# Usage:
# docker compose --profile all up -d
# docker compose --profile sonarqube up -d

services:
  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - 9000:9000
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://sonarqube_db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
    depends_on:
      sonarqube_db:
        condition: service_started
    networks:
      - nw_sonarqube
    profiles:
      - all
      - sonarqube

  sonarqube_db:
    image: postgres:latest
    container_name: db
    environment:
      - POSTGRES_DB=sonar
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nw_sonarqube
    profiles:
      - all
      - sonarqube

  sonarscanner_dotnet:
    image: mcr.microsoft.com/dotnet/sdk:8.0
    container_name: sonarscanner_dotnet
    depends_on:
      dk-webapplication:
        condition: service_started
      sonarqube:
        condition: service_started
    networks:
      - nw_sonarqube
    working_dir: /src
    env_file: .env
    volumes:
      - ../WebApplication:/src
    entrypoint: > # tail -f /dev/null
        /bin/sh -c "dotnet tool install --global dotnet-sonarscanner && \
        export PATH=\"$PATH:/root/.dotnet/tools\" && \
        dotnet sonarscanner begin /k:\"${SONAR_PROJECT_KEY}\" /d:sonar.host.url=\"${SONAR_HOST_URL}\" /d:sonar.token=\"${SONAR_LOGIN}\" && \
        dotnet build WebApplication.csproj && \
        dotnet sonarscanner end /d:sonar.token=\"${SONAR_LOGIN}\""
    profiles:
      - all
      - sonarqube

networks:
  nw_sonarqube:
    driver: bridge

volumes:
  sonarqube_data:
  sonarqube_extensions:
  postgres_data:
